#define R           iResolution
#define T           iTime

#define PI         3.14159265359
#define PI2        6.28318530718

mat2 rot(float a) {
    float c = cos(a), s = sin(a);
    return mat2(c, s, -s, c);
}

float hash21(vec2 a) {
    return fract(sin(dot(a, vec2(27.69, 32.58))) * 43758.53);
}

// Optimized box function
float box(vec2 p, vec2 b, float tk) {
    vec2 d = abs(p) - b;
    float dist = length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);
    return abs(dist) - tk; // Incorporate thickness directly
}

// Hue function to create vibrant colors
vec3 hue(float t, float f) {
    return f + f * cos(PI2 * t * (vec3(1.0, 0.75, 0.5) + vec3(0.96, 0.57, 0.12)));
}

vec2 pattern(vec2 p, float sc, mat2 r90) {
    vec2 id = floor(p * sc);
    p = fract(p * sc) - 0.5;

    float rnd = hash21(id);

    // Rotate tiles
    if (rnd > 0.5) p *= r90;
    rnd = fract(rnd * 32.54);
    if (rnd > 0.4) p *= r90;
    if (rnd > 0.8) p *= r90;

    // Randomize hash for type
    rnd = fract(rnd * 47.13);

    float tk = 0.025;
    float d = box(p - vec2(0.6, 0.7), vec2(0.25, 0.75), tk);

    if (rnd > 0.92) {
        d = box(p - vec2(-0.6, 0.5), vec2(0.25, 0.15), tk);
    } else if (rnd > 0.6) {
        d = length(p.x - 0.2) - tk;
    }

    return vec2(d, abs(d) - tk);
}

void mainImage(out vec4 O, in vec2 F) {
    vec3 C = vec3(0.0);
    vec2 uv = (2.0 * F - R.xy) / max(R.x, R.y);
    
    mat2 r90 = rot(PI * 0.5);
    uv *= rot(T * 0.10255 * PI2);
    uv = vec2(log(length(uv)), atan(uv.y, uv.x) * (6.0 / PI2));

    //float scale = 8.0 + sin(T * 0.01 / 10.0) * 0.2;
    float scale = 5.0 + ((sin(T * 0.1) * 0.0001) * 8.0);



    for (float i = 0.0; i < 6.0; i++) {
        float ff = (i * 0.05) + 0.2;
        uv *= - 1.0 ;  
        uv.x += T * ff;
        
        vec2 applyedPattern = uv ;
        vec2 d = pattern(uv, scale, r90);
        vec3 clr = hue(sin(uv.x + (i * 8.0)) * 0.2 + 0.4, (0.5 + i) * 0.15);

        float px = fwidth(uv.x * scale);
        C = mix(C, vec3(0.0001), smoothstep(px, -px, d.y - 0.004));
        C = mix(C, clr, smoothstep(px, -px, d.x));

        scale *= 0.65;
    }

    C = pow(C, vec3(0.4545)); // Gamma correction
    O = vec4(C, 1.0);
}
